# Determine own path if ZDOTDIR isn't set or home symlink exists
if [[ -z "${ZDOTDIR}" || -L "${HOME}/.zshenv" ]]; then
  local homezshenv="${HOME}/.zshenv"
  ZDOTDIR="${homezshenv:A:h}"
fi

# ignore /etc/zprofile, /etc/zshrc, /etc/zlogin, and /etc/zlogout
unsetopt GLOBAL_RCS

# disable Apple shell sessions
SHELL_SESSIONS_DISABLE=1

# run the path_helper in the order that we want it
# copied from /etc/zprofile
if [ -x /usr/libexec/path_helper ]; then
  eval `/usr/libexec/path_helper -s`
fi

# +---------+
# | exports |
# +---------+

# locale settings
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# preferred editor and pager
export EDITOR=nvim
export VISUAL=nvim
export PAGER=less

# less
export LESS="-FRX"

# homebrew
export HOMEBREW_NO_ENV_HINTS=1

# SSH
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock

# XDG base directory specification
export XDG_CONFIG_HOME"=${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"

# XDG compliance (see xdg-ninga for help)
export ASDF_CONFIG_FILE="${XDG_CONFIG_HOME}/asdf/asdfrc"
export AWS_CONFIG_FILE="${XDG_CONFIG_HOME}/aws/config"
export AWS_SHARED_CREDENTIALS_FILE="${XDG_CONFIG_HOME}/aws/credentials"
export BUNDLE_USER_CONFIG="${XDG_CONFIG_HOME}/bundle/config"
export IRBRC="${XDG_CONFIG_HOME}/irb/irbrc"
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}/npm/npmrc"
export RIPGREP_CONFIG_PATH="${XDG_CONFIG_HOME}/ripgrep/config"

# +----------+
# | homebrew |
# +----------+

local brew_path="/opt/homebrew/bin"
if (( ! ${+commands[brew]} )) && [[ -x "${brew_path}/brew" ]]; then
  path=("${brew_path}" ${path})
  fpath=($(brew --prefix)/share/zsh/site-functions ${fpath})
fi
unset brew_path

if (( ${+commands[brew]} )); then
  eval "$(brew shellenv)"
fi

# +------+
# | asdf |
# +------+

if (( ${+commands[asdf]} )); then
  source "$(brew --prefix asdf)/libexec/asdf.sh"
fi

# +-------+
# | paths |
# +-------+

# local bin path
path=(${HOME}/.local/bin ${path})

# docker
local docker_path="${HOME}/.docker/bin"
if [[ -d "${docker_path}" ]]; then
  path=(${docker_path} ${path})
fi
unset docker_path

# postgres.app
local postgres_path="/Applications/Postgres.app/Contents/Versions/latest/bin"
if [[ -d "${postgres_path}" ]]; then
  path=($postgres_path ${path})
fi
unset postgres_path

# yarn
if (( ${+commands[yarn]} )); then
  path=($(yarn global bin) ${path})
fi
